// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package users

import (
	"context"
)

type Querier interface {
	// All returns the total number of [User] records, including deleted record(s).
	All(ctx context.Context, db DBTX) (int64, error)
	// Attributes will use the user's [User.ID] to hydrate all available [User] attribute(s). Note that the following call is more taxing on the database.
	Attributes(ctx context.Context, db DBTX, id int64) (User, error)
	// Count returns 0 or 1 depending on if a [User] record matching the provided email exists.
	Count(ctx context.Context, db DBTX, email string) (int64, error)
	// Create will create a new [User] record.
	Create(ctx context.Context, db DBTX, email string) (User, error)
	// Delete performs a hard database delete on a [User] record.
	Delete(ctx context.Context, db DBTX, id int64) error
	// DeleteByEmail performs a hard database delete on a [User] record.
	DeleteByEmail(ctx context.Context, db DBTX, email string) error
	// List returns all active User record(s).
	List(ctx context.Context, db DBTX) ([]User, error)
	// Me will return a [User] and all associated attribute(s) when provided the User's email address.
	Me(ctx context.Context, db DBTX, email string) (User, error)
	// Total returns the total number of [User] records, excluding deleted record(s).
	Total(ctx context.Context, db DBTX) (int64, error)
	// UpdateUserAvatar will update a provided [User] with their specified avatar.
	UpdateUserAvatar(ctx context.Context, db DBTX, arg *UpdateUserAvatarParams) error
	// Users returns all User record(s).
	Users(ctx context.Context, db DBTX) ([]User, error)
}

var _ Querier = (*Queries)(nil)
