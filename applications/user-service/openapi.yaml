openapi: 3.0.3
info:
    title: user-service
    version: 0.0.0
    description: |
        ...

servers:
    -   url: http://localhost:8080/v1/user-service
        description: "Local K8s Cluster"
    -   url: http://localhost:8080
        description: "Local API Instance"

paths:
    /:
        get:
            summary: Service Metadata
            tags:
                - Standard
            responses:
                200:
                    $ref: "#/components/responses/metadata"
    /health:
        get:
            summary: Health-Probe Endpoint
            tags:
                - Standard
            responses:
                200:
                    $ref: "#/components/responses/health"
    /@me:
        get:
            summary: Authenticated Session Metadata
            tags:
                - Service
            responses:
                200:
                    description: A successfully authenticated user's metadata response.
            security:
                -   Bearer: [ ]
                -   Cookie: [ ]
    /users/{id}:
        delete:
            summary: Delete User
            tags:
                - Service
            parameters:
                -   in: path
                    name: id
                    schema:
                        type: integer
                    required: true
                    description: The User-Service, User database record's primary key. ID can be found by visiting the @me endpoint.
                -   in: query
                    name: type
                    required: false
                    schema:
                        type: string
                        enum:
                            - soft
                            - hard
                        description: soft
            responses:
                204:
                    description: Successful deletion of a user database record.
            security:
                -   Bearer: [ ]
                -   Cookie: [ ]
    /users/{id}/avatar:
        patch:
            summary: Avatar Management
            tags:
                - Service
            parameters:
                -   in: path
                    name: id
                    schema:
                        type: integer
                    required: true
                    description: The User-Service, User database record's primary key. ID can be found by visiting the @me endpoint.
            requestBody:
                $ref: "#/components/requestBodies/avatar"
            responses:
                204:
                    description: Successful update of a user's avatar.
            security:
                -   Bearer: [ ]
                -   Cookie: [ ]

components:
    requestBodies:
        example:
            description: Optional description in *Markdown*.
            content:
                application/json:
                    schema:
                        type: object
                    example:
                        key: value
        avatar:
            description: Update a user's avatar.
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            avatar:
                                type: string
                                format: url
                        required:
                            - avatar
                        example:
                            avatar: https://example.com/assets/user.png
        registration:
            description: Optional description in *Markdown*.
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            email:
                                type: string
                                format: email
                            password:
                                type: string
                        required:
                            - email
                            - password
                    example:
                        email: "segmentational@gmail.com"
                        password: "P@ssw0rd!"
        login:
            description: The login request payload.
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            email:
                                type: string
                                format: email
                            password:
                                type: string
                        required:
                            - email
                            - password
                    example:
                        email: "segmentational@gmail.com"
                        password: "P@ssw0rd!"

    responses:
        example:
            description: Optional description in *Markdown*.
            content:
                application/json:
                    schema:
                        type: object
                    example:
                        key: value
        registration-conflict:
            description: User registration conflict when a user already exists with a given email address.
            content:
                text/plain; charset=utf-8:
                    schema:
                        type: string
                application/json:
                    schema:
                        type: object
        registration-success:
            description: A jwt-token response.
            headers:
                Set-Cookie:
                    schema:
                        type: string
            content:
                text/plain:
                    schema:
                        type: string
        login-success:
            description: A jwt-token response.
            headers:
                Set-Cookie:
                    schema:
                        type: string
            content:
                text/plain:
                    schema:
                        type: string
        health:
            description: A health check response used by internal probes.
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            status:
                                type: string
                                example: ok
        metadata:
            description: An endpoint response used as entry points by microservices.
            content:
                application/json:
                    schema:
                        type: object
                        additionalProperties:
                            type: string
                            example: example-service
                            properties:
                                path:
                                    type: string
                                    example: /
                                service:
                                    type: string
                                    example: example-service
                                version:
                                    type: string
                                    example: 1.0.0
                                    default: development
                            additionalProperties:
                                type: object
                    example:
                        example-service:
                            path: /
                            service: example-service
                            version: 1.0.0

    securitySchemes:
        Basic:
            description: Basic username + password authentication.
            type: http
            scheme: basic
        Bearer:
            description: Bearer token using a JWT.
            type: http
            scheme: bearer
            bearerFormat: JWT
        Cookie:
            description: Cookie token using a JWT.
            type: apiKey
            in: cookie
            name: token
        API:
            type: apiKey
            in: header
            name: X-API-Key
        OpenID:
            type: openIdConnect
            openIdConnectUrl: https://example.com/.well-known/openid-configuration
        OAuth2:
            type: oauth2
            flows:
                authorizationCode:
                    authorizationUrl: https://example.com/oauth/authorize
                    tokenUrl: https://example.com/oauth/token
                    scopes:
                        read: Grants read access
                        write: Grants write access
                        admin: Grants access to admin operations
