apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
    name: namespace-as-a-service
    annotations:
        policies.kyverno.io/description: |
            ...
spec:
    generateExisting: true
    validationFailureAction: Audit
    #    validationFailureActionOverrides:
    #        -   action: Enforce     # Action to apply
    #            namespaces: # List of affected namespaces
    #                - default
    #        -   action: Audit
    #            namespaces:
    #                - test
    rules:
        -   name: bootstrap
            match:
                all:
                    -   resources:
                            kinds:
                                - Namespace
                            name: example-system
                            operations:
                                - CREATE

            #            context:
            #                -   name: creation
            #                    apiCall:
            #                        urlPath: "/api/v1/namespaces"
            #                        jmesPath: "items[*].metadata.name | contains(@, 'standard')"
            #            preconditions:
            #                any:
            #                    -   key: "{{ creation }}"
            #                        operator: Equals
            #                        value: "false"

            generate:
                apiVersion: external-secrets.io/v1beta1
                kind: ExternalSecret
                name: postgres
                namespace: "{{request.object.metadata.name}}"
                synchronize: true
                data:
                    metadata:
                        name: postgres
                    spec:
                        secretStoreRef:
                            name: cluster-secret-store
                            kind: ClusterSecretStore
                        refreshInterval: "1m"
                        target:
                            creationPolicy: "Owner"
                            deletionPolicy: "Delete"
                            template:
                                engineVersion: v2
                                type: "Opaque"
                                data:
                                    engine: \{{ .engine }}
                                    host: \{{ .host }}
                                    password: \{{ .password }}
                                    port: \{{ .port }}
                                    username: \{{ .username }}
                                    database: \{{ .database }}
                                    timeout: \{{ .timeout }}
                                    application: \{{ .application }}
                                    mode: \{{ .mode }}
                                    root: \{{ .root }}
                                    tz: \{{ .tz }}
                        dataFrom:
                            -   extract:
                                    key: "ethr/development/rds/postgres/configuration"
                                    version: "AWSCURRENT"
                                    decodingStrategy: None
